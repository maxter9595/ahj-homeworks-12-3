!function(){"use strict";class e{constructor(){this.newsContainer=document.getElementById("news-content"),this.refreshBtn=document.querySelector(".refresh-btn"),this.init()}init(){this.setupEventListeners(),this.loadNews()}setupEventListeners(){this.refreshBtn.addEventListener("click",(()=>this.loadNews())),window.addEventListener("online",(()=>this.loadNews())),window.addEventListener("offline",(()=>this.showOfflineError()))}async loadNews(){this.showLoading();try{const e=await fetch("/api/news");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const n=await e.json();this.renderNews(n)}catch(e){console.error("Failed to load news:",e);try{const e=await caches.match("/api/news");if(e){const n=await e.json();this.renderNews(n)}else this.showError()}catch(e){this.showError()}}}renderNews(e){this.newsContainer.innerHTML=e.map((e=>`\n        <div class="news-item">\n          <div class="news-item-header">\n            <span class="news-item-datetime">${e.date}</span>\n          </div>\n          <div class="news-item-content">\n            <div class="news-item-image">\n              <img src="${e.image}" alt="${e.title}">\n            </div>\n            <div class="news-item-text">${e.text}</div>\n          </div>\n        </div>\n      `)).join("")}showLoading(){this.newsContainer.innerHTML=`\n      <div class="loading-skeleton">\n        ${Array(2).fill('\n          <div class="skeleton-item">\n            <div class="skeleton-header">\n              <div class="skeleton-title"></div>\n              <div class="skeleton-date"></div>\n            </div>\n            <div class="skeleton-body">\n              <div class="skeleton-image"></div>\n              <div class="skeleton-text"></div>\n            </div>\n          </div>\n        ').join("")}\n      </div>\n    `}showError(){this.showMessage("Не удалось загрузить данные")}showOfflineError(){this.showMessage("Не удалось загрузить данные")}showMessage(e){this.newsContainer.innerHTML=`\n      <div class="loading-skeleton">\n        ${Array(2).fill('<div class="skeleton-item">\n              <div class="skeleton-header">\n                <div class="skeleton-title"></div>\n                <div class="skeleton-date"></div>\n              </div>\n              <div class="skeleton-body">\n                <div class="skeleton-image"></div>\n                <div class="skeleton-text"></div>\n              </div>\n            </div>').join("")}\n      </div>\n      <div class="error-overlay">\n        <div class="error-state">\n          <p>${e}</p>\n          <p>Проверьте подключение</p>\n          <p>и обновите страницу</p>\n        </div>\n      </div>\n    `}setupServiceWorker(){"serviceWorker"in navigator&&window.addEventListener("load",(()=>{navigator.serviceWorker.register("/sw.js").then(this.handleRegistration).catch(console.error)}))}handleRegistration(e){console.log("ServiceWorker зарегистрирован:",e.scope),e.addEventListener("updatefound",(()=>{const n=e.installing;console.log("Обнаружено обновление Service Worker"),n.addEventListener("statechange",(()=>{"activated"===n.state&&console.log("Новая версия Service Worker активирована")}))}))}initNetworkStatus(){const e=()=>{navigator.onLine||console.log("Приложение запущено в оффлайн-режиме")};window.addEventListener("online",e),window.addEventListener("offline",e),e()}}class n{static init(){new e,"serviceWorker"in navigator&&setTimeout((()=>{navigator.serviceWorker.register("/serviceWorker/sw.js",{scope:"/serviceWorker/",updateViaCache:"none"}).then((e=>{e.active&&e.update().catch(console.error),e.addEventListener("updatefound",(()=>{const n=e.installing;n.addEventListener("statechange",(()=>{"activated"===n.state&&console.log("New SW activated")}))}))})).catch(console.error)}),1e3),n.initNetworkStatus()}static handleSWRegistration(e){console.log("ServiceWorker зарегистрирован:",e.scope),e.addEventListener("updatefound",(()=>{const n=e.installing;console.log("Обнаружено обновление Service Worker"),n.addEventListener("statechange",(()=>{"activated"===n.state&&(console.log("Новая версия Service Worker активирована"),window.location.reload())}))})),setInterval((()=>{e.update().catch((e=>console.log("Автопроверка обновлений SW не удалась:",e)))}),36e5)}static initNetworkStatus(){const e=()=>{const e=navigator.onLine?"Онлайн":"Оффлайн";console.log(e),navigator.onLine||console.log("Приложение запущено в оффлайн-режиме")};window.addEventListener("online",e),window.addEventListener("offline",e),e()}}n.init()}();